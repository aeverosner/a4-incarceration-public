# 59086
print(nrow(counties))
# 205832
# Create `obs_national`, `obs_states`, `obs_counties`
obs_national <- nrow(national)
obs_states <- nrow(state)
obs_counties <- nrow(counties)
# 1.f How many features (columns) are there in each dataset?
# Create `num_features_national`, `num_features_states`, `num_features_counties`
num_features_national <- ncol(national)
num_features_states <- ncol(state)
num_features_counties <- ncol(counties)
# 2 Exploratory Analysis ----------------------------------------------------
# Reflection 1 (answer in the README.md file)
# Before actually calculating the total number of COVID cases and deaths, record
# your guesses for the following questions. (1 point)
# Guess: How many total COVID cases do you think there have been in the U.S.?
# Guess: How many total COVID-related deaths do you think there have been in the
# U.S.?
# Guess: Which state do you think has the highest number of COVID cases, and
# which state do you think has the lowest?
# 2.a How many total COVID cases have there been in the U.S. by the most recent
# date in the dataset? Make sure to pull() this number `total_us_cases`
total_us_cases <- national %>%
filter(date == max(date)) %>%
pull(cases)
total_us_cases
# 2.b How many total COVID-related deaths have there been in the U.S. by the
# most recent date in the dataset? Make sure to pull() this number
# `total_us_deaths`
total_us_deaths <- national %>%
filter(date == max(date)) %>%
pull(deaths)
total_us_deaths
# 2.c Which state has had the highest number of COVID cases? Make sure to pull()
# this value `state_highest_cases`
state_highest_cases <- state %>%
group_by(state) %>%
summarize(total_cases = sum(cases)) %>%
filter(total_cases == max(total_cases)) %>%
pull(state)
state_highest_cases
# 2.d What is the highest number of cases in a state? Make sure to pull() this
# number `num_highest_state`
num_highest_state <- state %>%
filter(cases == max(cases)) %>%
pull(cases)
num_highest_state
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of
# the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this:
# `state_highest_ratio`
state_highest_ratio <- state %>%
filter(date == max(date)) %>%
mutate(state_ratio = deaths / cases) %>%
filter(state_ratio == max(state_ratio)) %>%
pull(state)
state_highest_ratio
# 2.f Which state has had the fewest number of cases as of the most
# recent date? Make sure to pull() this value `state_lowest_cases`
unique(state$state)
state_lowest_cases <- state %>%
filter(date == max(date)) %>%
filter(cases == min(cases)) %>%
pull(state)
state_lowest_cases
# 2.f Which state has had the fewest number of cases as of the most
# recent date? Make sure to pull() this value `state_lowest_cases`
territories <- c("Guam", "Virgin Islands", "District of Columbia", "Northern Mariana Islands", "American Samoa", "Puerto Rico")
filter(cases == min(cases)) %>%
pull(state)
state_lowest_cases <- state %>%
filter(date == max(date)) %>%
filter(!state %in% territories %>%)
state_lowest_cases <- state %>%
filter(date == max(date)) %>%
filter(!state %in% territories) %>%
filter(cases == min(cases)) %>%
pull(state)
state_lowest_cases
num_highest_cases_county <- counties %>%
filter(cases == max(cases)) %>%
pull(cases)
num_highest_cases_county
county_highest_cases <- counties %>%
filter(cases == max(cases)) %>%
pull(county)
county_highest_cases
counties %>%
mutate(location = county, state)
counties %>%
mutate(mutate(location = paste(county, state, sep = ", ")))
counties <- counties %>%
mutate(location = paste(county, state, sep = ", "))
counties
location_most_deaths <- counties %>%
filter(deaths == max(deaths)) %>%
pull(location)
location_most_deaths
county_highest_cases <- counties %>%
filter(cases == max(cases)) %>%
pull(county)
county_highest_cases
location_most_deaths <- counties %>%
filter(date == max(date)) %>%
filter(deaths == max(deaths)) %>%
pull(location)
location_most_deaths
counties %>%
mutate(location = paste(county, state, sep = ", "))
counties
location_most_deaths <- counties %>%
filter(deaths == max(deaths)) %>%
pull(location)
location_most_deaths
location_most_deaths <- counties %>%
filter(deaths == max(counties$deaths)) %>%
pull(location)
location_most_deaths
location_most_deaths <- counties %>%
filter(deaths == max(counties$deaths)) %>%
pull(county)
location_most_deaths
counties %>%
mutate(location = paste(county, state, sep = ", "))
View(counties)
location_most_deaths <- counties %>%
filter(deaths == max(deaths)) %>%
pull(location)
print(location_most_deaths)
national <- national %>%
mutate(daily_cases_increase = cases - lag(cases, default = 0))
national
national <- national %>%
mutate(new_cases = cases - lag(cases, default = 0))
national
national <- national %>%
mutate(new_cases = cases - lag(cases, default = 0))
national
national <- national %>%
mutate(new_deaths = deaths - lag(deaths, default = 0))
national
date_most_cases <- national %>%
filter(date_most_cases == max(new_cases)) %>%
pull(date)
date_most_cases <- national %>%
filter(new_cases == max(new_cases)) %>%
pull(date)
date_most_cases
date_most_deaths <- national %>%
filter(new_deaths == max(new_deaths)) %>%
pull(date)
date_most_deaths
most_deaths <- national %>%
filter(new_deaths == max(new_deaths)) %>%
pull(new_deaths)
most_deaths
# You can plot this data with built-in plot functions
plot(national$new_cases)
plot(national$new_deaths)
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases))
highest_cases_in_each_state
print(highest_cases_in_each_state)
View(highest_cases_in_each_state)
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases)) %>%
ungroup()
print(highest_cases_in_each_state)
View(highest_cases_in_each_state)
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases)) %>%
slice(1) %>%
ungroup()
View(highest_cases_in_each_state)
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(deaths == max(deaths)) %>%
slice(1) %>%
ungroup()
View(lowest_deaths_in_each_state)
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(deaths == min(deaths)) %>%
slice(1) %>%
ungroup()
View(lowest_deaths_in_each_state)
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(deaths == min(deaths)) %>%
ungroup()
View(lowest_deaths_in_each_state)
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(deaths == min(deaths)) %>%
slice(1) %>%
ungroup()
View(lowest_deaths_in_each_state)
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(deaths == min(deaths)) %>%
ungroup()
View(lowest_deaths_in_each_state)
total_cases_counties <- counties %>%
group_by(date) %>%
summarize(county_total_cases = sum(cases))
total_cases_counties
View(total_cases_counties)
# 4.b Join `total_cases_counties` with the `national` dataframe.
# Save this dataframe as `all_totals`.
all_totals <- left_join(national, total_cases_counties)
View(all_totals)
# 4.c Filter the all_totals dataframe to find only the rows where the
# "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>%
filter(cases != county_total_cases)
View(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
num_national_county_diff
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- national %>%
mutate(daily_case_diff = cases - lag(cases, default = first(cases))) %>%
max(daily_case_diff) %>%
print(date)
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- national %>%
arrange(date) %>%
mutate(daily_case_diff = cases - lag(cases, default = first(cases))) %>%
max(daily_case_diff) %>%
print(date)
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- national %>%
arrange(date) %>%
mutate(daily_case_diff == cases - lag(cases, default = first(cases))) %>%
max(daily_case_diff) %>%
print(date)
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- national %>%
arrange(date) %>%
mutate(daily_case_diff = cases - lag(cases, default = first(cases))) %>%
max(daily_case_diff) %>%
pull(date)
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- national %>%
arrange(date) %>%
mutate(daily_case_diff = cases - lag(cases, default = first(cases))) %>%
pull(national$daily_case_diff)
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- national %>%
arrange(date) %>%
mutate(daily_case_diff = cases - lag(cases, default = first(cases))) %>%
pull(national$daily_case_diff) %>%
max(daily_case_diff)
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- national %>%
arrange(date) %>%
mutate(daily_case_diff = cases - lag(cases, default = first(cases))) %>%
pull(daily_case_diff) %>%
max(daily_case_diff)
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- national %>%
arrange(date) %>%
max(new_cases) %>%
pull(date)
#  Write code (at least 2-3 lines) that will answer your question
View(national)
last_to_document_first_case <- state %>%
group_by(state) %>%
filter(first(total_cases) == 1) %>%
summarize(date_of_first_case = max(date))
last_to_document_first_case <- state %>%
group_by(state) %>%
filter(first(cases) == 1) %>%
summarize(date_of_first_case = max(date))
last_to_document_first_case <- state %>%
group_by(state) %>%
filter(first(cases) == 1) %>%
summarize(date_of_first_case = max(date)) %>%
filter(date_of_first_case = max(date_of_first_case)) %>%
pull(state)
last_to_document_first_case <- state %>%
group_by(state) %>%
filter(first(cases) == 1) %>%
summarize(date_of_first_case = max(date)) %>%
filter(date_of_first_case == max(date_of_first_case)) %>%
pull(state)
last_to_document_first_case
last_to_document_first_case <- state %>%
group_by(state) %>%
filter(first(cases) == 1) %>%
summarize(date_of_first_case == max(date)) %>%
filter(date_of_first_case == max(date_of_first_case)) %>%
pull(state)
last_to_document_first_case <- state %>%
group_by(state) %>%
filter(first(cases) == 1) %>%
summarize(date_of_first_case = max(date)) %>%
pull(state)
last_to_document_first_case
last_to_document_first_case <- state %>%
group_by(state) %>%
filter(first(cases) == 1) %>%
filter(date_of_first_case == max(date)) %>%
pull(state)
last_to_document_first_case <- state %>%
group_by(state) %>%
filter(first(cases) == 1) %>%
filter(date == max(date)) %>%
pull(state)
last_to_document_first_case
last_to_document_first_case <- state %>%
group_by(date) %>%
filter(first(cases) == 1) %>%
filter(date == max(date)) %>%
pull(state)
last_to_document_first_case
last_to_document_first_case <- state %>%
group_by(state) %>%
filter(first(cases) == 1) %>%
filter(date == max(date)) %>%
pull(date)
last_to_document_first_case
texas_counties <- counties %>%
filter(state = "Texas")
texas_counties <- counties %>%
filter(state == "Texas")
texas_counties
View(texas_counties)
first_texas_case <- texas_counties %>%
arrange(date) %>%
filter(date == min(date)) %>%
pull(location)
first_texas_case
# Load Packages
library(dplyr)
library(tidyverse)
library(ggplot2)
library(readr)
# Load Data
nba_data <- read_csv("C:\Users\aever\Documents\INFO201\exploratory-analysis-charliebond1\CSVs\nba-stats_out.csv")
# Load Data
nba_data <- read_csv("C:/Users/aever/Documents/INFO201/exploratory-analysis-charliebond1/CSVs/nba-stats_out.csv")
wnba_data <- read_csv("C:/Users/aever/Documents/INFO201/exploratory-analysis-charliebond1/CSVs/wnba-stats_out.csv")
combined_basketball_data <- bind_rows(nba_data, wnba_data)
rlang::last_trace()
nba_data
combined_basketball_data <- bind_rows(nba_data, wnba_data)
View(nba_data)
View(wnba_data)
combined_basketball_data <- bind_rows("nba_data", "wnba_data")
combined_basketball_data <- bind_rows(nba_data, wnba_data)
nba_data <- nba_data  %>%
mutate(`slry/blks` = as.character(`slry/blks`))
wnba_data <- wnba_data %>%
mutate(`slry/blks` = as.character(`slry/blks`))
combined_basketball_data <- bind_rows(nba_data, wnba_data)
View(combined_basketball_data)
nrow(combined_basketball_data)
# Average Salary of NBA players
average_salary_NBA <- mean(nba_data$salary)
print(average_salary_NBA)
# Average Salary of WNBA players
average_salary_WNBA <- mean(wnba_data$salary)
print(average_salary_WNBA)
print(avg_salary_per_min_NBA)
# Average dollars earned per minute of play (NBA)
avg_salary_per_min_NBA <- mean((nba_data$salary)/(nba_data$minutes))
print(avg_salary_per_min_NBA)
# Maximum NBA salary
max_salary_NBA <- max(nba_data$salary)
print(max_salary_NBA)
# Maximum WNBA salary
max_salary_WNBA <- max(wnba_data$salary)
print(max_salary_WNBA)
# Minimum NBA salary
min_salary_NBA <- min(nba_data$salary)
print(min_salary_NBA)
# Minimum WNBA salary
min_salary_WNBA <- min(wnba_data$salary)
print(min_salary_WNBA)
print(zero_minutes_rows_nba)
# Average dollars earned per minute of play (NBA)
zero_minutes_rows_nba <- nba_data[nba_data$minutes ==0]
# Average dollars earned per minute of play (NBA)
zero_minutes_rows_nba <- nba_data[nba_data$minutes == 0, ]
print(zero_minutes_rows_nba)
nba_data_no_zero_minutes <- nba_data[nba_data$minutes != 0, ]
avg_salary_per_min_NBA <- mean((zero_minutes_rows_nba$salary)/(zero_minutes_rows_nba$minutes))
print(avg_salary_per_min_NBA)
zero_minutes_rows_nba <- nba_data[nba_data$minutes == 0, ]
print(zero_minutes_rows_nba)
nba_data_no_zero_minutes <- nba_data[nba_data$minutes != 0, ]
avg_salary_per_min_NBA <- mean((zero_minutes_rows_nba$salary)/(zero_minutes_rows_nba$minutes))
print(avg_salary_per_min_NBA)
avg_salary_per_min_NBA <- mean((nba_data_no_zero_minutes$salary)/(nba_data_no_zero_minutes$minutes))
print(avg_salary_per_min_NBA)
View(nba_data_no_zero_minutes)
wnba_data_no_zero_minutes <- wnba_data[wnba_data$minutes != 0, ]
View(wnba_data_no_zero_minutes)
avg_salary_per_min_WNBA <- mean((wnba_data_no_zero_minutes$salary)/(wnba_data_no_zero_minutes$minutes))
print(avg_salary_per_min_WNBA)
nba_data_no_zero_points <- nba_data[nba_data$points != 0, ]
View(nba_data_no_zero_points)
avg_salary_per_point_NBA <- mean((nba_data_no_zero_points$salary)/(nba_data_no_zero_points$points))
print(avg_salary_per_point_NBA)
wnba_data_no_zero_points <- wnba_data[wnba_data$points != 0, ]
View(wnba_data_no_zero_points)
avg_salary_per_point_WNBA <- mean((wnba_data_no_zero_points$salary)/(wnba_data_no_zero_points$points))
print(avg_salary_per_point_WNBA)
min_meal_lost <- financial_df %>%
select(`State Name`, `Meals Not Consumed due to Budget Shortfall`) %>%
group_by(`Meals Not Consumed due to Budget Shortfall`) %>%
filter(
`Meals Not Consumed due to Budget Shortfall` ==
min(`Meals Not Consumed due to Budget Shortfall`)
) %>%
pull(`State Name`)
library(tidyverse)
library(dplyr)
library(readxl)
library(plyr)
library(scales)
fa_2018 <- read_excel("DATA/Feeding America Data/MMG2020_2018Data_ToShare.xlsx",
skip = 1, sheet = "2018 State"
)
financial_df <- fa_2018 %>%
select(
`State Name`, `2018 Cost Per Meal`,
`2018 Weighted Annual Food Budget Shortfall`
) %>%
group_by(`State Name`) %>%
mutate(
`Meals Not Consumed due to Budget Shortfall` =
`2018 Weighted Annual Food Budget Shortfall` / `2018 Cost Per Meal`
) %>%
mutate(
`Meals Not Consumed due to Budget Shortfall` =
number(`Meals Not Consumed due to Budget Shortfall`, big.mark = ",")
) %>%
mutate(
`2018 Weighted Annual Food Budget Shortfall` =
number(`2018 Weighted Annual Food Budget Shortfall`, big.mark = ",")
)
View(fa_2018)
# Load data
fa_2018 <- read_excel("DATA/Feeding America Data/MMG2020_2018Data_ToShare.xlsx",
skip = 1, sheet = "2018 State"
)
# Load Data
nba_data <- read_csv("C:/Users/aever/Documents/INFO201/exploratory-analysis-charliebond1/NBA Player Salaries (2022-23 Season)_exported.csv")
View(nba_data)
source("CHART2_PALMY.R")
library(shiny)
library(shiny)
install.packages(shiny)
install.packages("shiny")
install.packages("shiny")
library(shiny); runApp('ui1.R')
runApp('ui1.R')
runApp('ui1.R')
runApp('ui1.R')
chart3_map
library(dplyr)
library(ggplot2)
library(sf)
library(tigris)
# load and filter data (a recent year and by state)
jail_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/us-prison-jail-rates.csv")
jail_data_recent <- jail_data %>% filter(year == 2010)
jail_data_recent_state <- jail_data_recent %>%
group_by(state) %>%
summarize(black_prison_pop_rate = mean(black_prison_pop_rate, na.rm = TRUE))
# load map and merge states on map with state data
states <- states(cb = TRUE)
jail_data_map <- states %>%
left_join(jail_data_recent_state, by = c("STUSPS" = "state"))
# create the visual
chart3_map <- ggplot(jail_data_map) +
geom_sf(aes(fill = black_prison_pop_rate), color = "white", size = 0.2) +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "grey",
name = "Incarceration rate") +
labs(title = "black incarceration rates by state",
subtitle = "darker shade indicates higher rates") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
chart3_map
source("summary.R")
source("chart1_time.R")
chart_1_graph
source("chart2_population.R")
option(Timeout = 300)
options(timeout = 300)
source("chart2_population.R")
chart_2_graph
options(timeout = 600)
options(timeout = 600)
setwd(C:/Users/aever/Documents/INFO201/a4-incarceration-assignment-aeverosner)
setwd("C:/Users/aever/Documents/INFO201/a4-incarceration-assignment-aeverosner")
options(repos = c(CRAN = "https://cloud.r-project.org"))
